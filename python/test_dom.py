import archon.test
import archon.dom


def _make_document():
    content_type = "application/xml"
    is_html = False
    return archon.dom.Document(content_type, is_html)


def test_AppendChild(context):
    doc = _make_document()
    root = doc.create_element("root")
    context.check_not(root.has_child_nodes())
    context.check_equal(root.get_first_child(), None)
    context.check_equal(root.get_last_child(), None)
    context.check_equal(len(root.get_child_nodes()), 0)

    foo = doc.create_element("foo")
    root.append_child(foo)
    context.check(root.has_child_nodes())
    context.check_equal(root.get_first_child(), foo)
    context.check_equal(root.get_last_child(), foo)
    context.check_equal(len(root.get_child_nodes()), 1)
    context.check_equal(root.get_child_nodes()[0], foo)
    context.check_equal(foo.get_previous_sibling(), None)
    context.check_equal(foo.get_next_sibling(), None)

    bar = doc.create_element("bar")
    root.append_child(bar)
    context.check(root.has_child_nodes())
    context.check_equal(root.get_first_child(), foo)
    context.check_equal(root.get_last_child(), bar)
    context.check_equal(len(root.get_child_nodes()), 2)
    context.check_equal(root.get_child_nodes()[0], foo)
    context.check_equal(root.get_child_nodes()[1], bar)
    context.check_equal(foo.get_previous_sibling(), None)
    context.check_equal(foo.get_next_sibling(), bar)
    context.check_equal(bar.get_previous_sibling(), foo)
    context.check_equal(bar.get_next_sibling(), None)

    baz = doc.create_text_node("baz")
    root.append_child(baz)
    context.check(root.has_child_nodes())
    context.check_equal(root.get_first_child(), foo)
    context.check_equal(root.get_last_child(), baz)
    context.check_equal(len(root.get_child_nodes()), 3)
    context.check_equal(root.get_child_nodes()[0], foo)
    context.check_equal(root.get_child_nodes()[1], bar)
    context.check_equal(root.get_child_nodes()[2], baz)
    context.check_equal(foo.get_previous_sibling(), None)
    context.check_equal(foo.get_next_sibling(), bar)
    context.check_equal(bar.get_previous_sibling(), foo)
    context.check_equal(bar.get_next_sibling(), baz)
    context.check_equal(baz.get_previous_sibling(), bar)
    context.check_equal(baz.get_next_sibling(), None)


def test_InsertBefore(context):
    doc = _make_document()
    root = doc.create_element("root")

    foo = doc.create_element("foo")
    root.insert_before(foo, None)
    context.check(root.has_child_nodes())
    context.check_equal(root.get_first_child(), foo)
    context.check_equal(root.get_last_child(), foo)
    context.check_equal(len(root.get_child_nodes()), 1)
    context.check_equal(root.get_child_nodes()[0], foo)
    context.check_equal(foo.get_previous_sibling(), None)
    context.check_equal(foo.get_next_sibling(), None)

    bar = doc.create_element("bar")
    root.insert_before(bar, foo)
    context.check(root.has_child_nodes())
    context.check_equal(root.get_first_child(), bar)
    context.check_equal(root.get_last_child(), foo)
    context.check_equal(len(root.get_child_nodes()), 2)
    context.check_equal(root.get_child_nodes()[0], bar)
    context.check_equal(root.get_child_nodes()[1], foo)
    context.check_equal(foo.get_previous_sibling(), bar)
    context.check_equal(foo.get_next_sibling(), None)
    context.check_equal(bar.get_previous_sibling(), None)
    context.check_equal(bar.get_next_sibling(), foo)

    baz = doc.create_text_node("baz")
    root.insert_before(baz, foo)
    context.check(root.has_child_nodes())
    context.check_equal(root.get_first_child(), bar)
    context.check_equal(root.get_last_child(), foo)
    context.check_equal(len(root.get_child_nodes()), 3)
    context.check_equal(root.get_child_nodes()[0], bar)
    context.check_equal(root.get_child_nodes()[1], baz)
    context.check_equal(root.get_child_nodes()[2], foo)
    context.check_equal(foo.get_previous_sibling(), baz)
    context.check_equal(foo.get_next_sibling(), None)
    context.check_equal(bar.get_previous_sibling(), None)
    context.check_equal(bar.get_next_sibling(), baz)
    context.check_equal(baz.get_previous_sibling(), bar)
    context.check_equal(baz.get_next_sibling(), foo)


def test_RemoveChild(context):
    doc = _make_document()
    root = doc.create_element("root")
    foo = doc.create_element("foo")
    root.append_child(foo)
    bar = doc.create_element("bar")
    root.append_child(bar)
    baz = doc.create_text_node("baz")
    root.append_child(baz)

    root.remove_child(bar)
    context.check(root.has_child_nodes())
    context.check_equal(root.get_first_child(), foo)
    context.check_equal(root.get_last_child(), baz)
    context.check_equal(len(root.get_child_nodes()), 2)
    context.check_equal(root.get_child_nodes()[0], foo)
    context.check_equal(root.get_child_nodes()[1], baz)
    context.check_equal(foo.get_previous_sibling(), None)
    context.check_equal(foo.get_next_sibling(), baz)
    context.check_equal(bar.get_previous_sibling(), None)
    context.check_equal(bar.get_next_sibling(), None)
    context.check_equal(baz.get_previous_sibling(), foo)
    context.check_equal(baz.get_next_sibling(), None)

    root.insert_before(bar, baz)
    root.remove_child(baz)
    context.check(root.has_child_nodes())
    context.check_equal(root.get_first_child(), foo)
    context.check_equal(root.get_last_child(), bar)
    context.check_equal(len(root.get_child_nodes()), 2)
    context.check_equal(root.get_child_nodes()[0], foo)
    context.check_equal(root.get_child_nodes()[1], bar)
    context.check_equal(foo.get_previous_sibling(), None)
    context.check_equal(foo.get_next_sibling(), bar)
    context.check_equal(bar.get_previous_sibling(), foo)
    context.check_equal(bar.get_next_sibling(), None)
    context.check_equal(baz.get_previous_sibling(), None)
    context.check_equal(baz.get_next_sibling(), None)

    root.remove_child(foo)
    context.check(root.has_child_nodes())
    context.check_equal(root.get_first_child(), bar)
    context.check_equal(root.get_last_child(), bar)
    context.check_equal(len(root.get_child_nodes()), 1)
    context.check_equal(root.get_child_nodes()[0], bar)
    context.check_equal(foo.get_previous_sibling(), None)
    context.check_equal(foo.get_next_sibling(), None)
    context.check_equal(bar.get_previous_sibling(), None)
    context.check_equal(bar.get_next_sibling(), None)
    context.check_equal(baz.get_previous_sibling(), None)
    context.check_equal(baz.get_next_sibling(), None)

    root.remove_child(bar)
    context.check_not(root.has_child_nodes())
    context.check_equal(root.get_first_child(), None)
    context.check_equal(root.get_last_child(), None)
    context.check_equal(len(root.get_child_nodes()), 0)
    context.check_equal(foo.get_previous_sibling(), None)
    context.check_equal(foo.get_next_sibling(), None)
    context.check_equal(bar.get_previous_sibling(), None)
    context.check_equal(bar.get_next_sibling(), None)
    context.check_equal(baz.get_previous_sibling(), None)
    context.check_equal(baz.get_next_sibling(), None)


# Bridge to Python's native testing framework
def load_tests(loader, standard_tests, pattern):
    return archon.test.generate_native_tests(__name__)


if __name__ == '__main__':
    archon.test.run_module_tests(__name__)
