// This file is part of the Archon project, a suite of C++ libraries.
//
// Copyright (C) 2020 Kristian Spangsege <kristian.spangsege@gmail.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this
// software and associated documentation files (the "Software"), to deal in the Software
// without restriction, including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef ARCHON_X_CORE_X_PLATFORM_INFO_HPP
#define ARCHON_X_CORE_X_PLATFORM_INFO_HPP

/// \file


#include <string>


namespace archon::core {


/// \brief Describe the current system-level platform.
///
/// This function calls \ref get_platform_info() and returns a space-separated concatenation
/// of the fields `osname`, `sysname`, `release`, `version`, and `machine` in the produced
/// \ref PlatformInfo object, in that order.
///
auto get_platform_description() -> std::string;



/// \brief System-level platform information.
///
/// Correspondance with fields of `struct utsname` as generated by POSIX function `uname()`,
/// and with POSIX command-line utility `uname`:
///
/// | Field of `PlatformInfo` | Field of `struct utsname` | `uname()` option
/// |-------------------------|---------------------------|------------------
/// | `osname`                |                           | `-o` (on Linux)
/// | `sysname`               | `sysname`                 | `-s`
/// | `release`               | `release`                 | `-r`
/// | `version`               | `version`                 | `-v`
/// | `machine`               | `machine`                 | `-m`
///
struct PlatformInfo {
    std::string osname;  ///< Operating system, or platform name.
    std::string sysname; ///< Kernel, or operating system name.
    std::string release; ///< Kernel, or operating system release.
    std::string version; ///< Kernel, or operating system version.
    std::string machine; ///< Machine hardware name.
};



/// \brief Get information about the current system-level platform.
///
/// This function describes the current system-level platform in terms similar to the POSIX
/// function `uname()` and POSIX command-line utility `uname`. See \ref PlatformInfo for
/// more on this correspondance.
///
void get_platform_info(PlatformInfo&);








// Implementation


inline auto get_platform_description() -> std::string
{
    PlatformInfo info;
    get_platform_info(info); // Throws
    return (info.osname + " " + info.sysname + " " + info.release + " " + info.version + " " + info.machine); // Throws
}


} // namespace archon::core

#endif // ARCHON_X_CORE_X_PLATFORM_INFO_HPP
