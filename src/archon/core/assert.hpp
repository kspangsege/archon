// This file is part of the Archon project, a suite of C++ libraries.
//
// Copyright (C) 2020 Kristian Spangsege <kristian.spangsege@gmail.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this
// software and associated documentation files (the "Software"), to deal in the Software
// without restriction, including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef ARCHON_X_CORE_X_ASSERT_HPP
#define ARCHON_X_CORE_X_ASSERT_HPP

/// \file


#include <archon/core/features.h>
#include <archon/core/terminate.hpp>


/// \brief State and check an assertion.
///
/// This macro is used to assert that a particular condition is true. If assertions are
/// enabled (\ref ARCHON_ASSERTIONS_ENABLED), the specified condition will be evaluated in a
/// boolean context. If it evaluates to false, a message will be written to STDERR, and then
/// the program will be terminated immediately through invocation of `std::abort()`.
///
/// The message that is written on failure of the asssertion is on the following form:
///
///     Assertion failed: size <= capacity
///
/// If assertions are disabled, this macro has no effect, and the specified condition will
/// not be evaluated (but it will still be type checked).
///
/// \sa \ref ARCHON_STEADY_ASSERT()
///
#define ARCHON_ASSERT(condition)                \
    X_ARCHON_ASSERT(condition)


/// \brief State and check an assertion with custom message.
///
/// This macro has the same effect as \ref ARCHON_ASSERT(), but displays the specified
/// custom message on failure instead of the one generated by \ref ARCHON_ASSERT().
///
/// \sa \ref ARCHON_STEADY_ASSERT_M()
///
#define ARCHON_ASSERT_M(condition, message)     \
    X_ARCHON_ASSERT_M(condition, message)


/// \brief Assert unreachability of position in code.
///
/// This macro is a shorthand for `ARCHON_ASSERT_M(false, "Assertion failed:
/// Unreachable")`. See \ref ARCHON_ASSERT_M() for more on assertions in general.
///
/// \sa \ref ARCHON_STEADY_ASSERT_UNREACHABLE()
///
#define ARCHON_ASSERT_UNREACHABLE()             \
    X_ARCHON_ASSERT_UNREACHABLE()


/// \def ARCHON_ASSERTIONS_ENABLED
///
/// \brief True when assertions are enabled
///
/// The purpose of this macro is to allow code to check whether assertions (\ref
/// ARCHON_ASSERT()) are enabled. It is set to 1 when assertios are enabled. Currently,
/// assertions are enabled when the library is compiled in debug mode (`ARCHON_DEBUG`) or
/// when macro `ARCHON_ENABLE_ASSERTIONS` is defined.
///
#if ARCHON_DEBUG || defined ARCHON_ENABLE_ASSERTIONS
#  define ARCHON_ASSERTIONS_ENABLED 1
#else
#  define ARCHON_ASSERTIONS_ENABLED 0
#endif


/// \brief State and always check an assertion.
///
/// This macro is identical to \ref ARCHON_ASSERT(), except that its effect is retained
/// regardless of whether assertions are enabled (see \ref ARCHON_ASSERTIONS_ENABLED).
///
#define ARCHON_STEADY_ASSERT(condition)         \
    X_ARCHON_STEADY_ASSERT(condition)


/// \brief State and always check an assertion with custom message.
///
/// This macro is identical to \ref ARCHON_ASSERT_M(), except that its effect is retained
/// regardless of whether assertions are enabled (see \ref ARCHON_ASSERTIONS_ENABLED).
///
#define ARCHON_STEADY_ASSERT_M(condition, message)      \
    X_ARCHON_STEADY_ASSERT_M(condition, message)


/// \brief Always assert unreachability of position in code.
///
/// This macro is identical to \ref ARCHON_ASSERT_UNREACHABLE(), except that its effect is
/// retained regardless of whether assertions are enabled (see \ref
/// ARCHON_ASSERTIONS_ENABLED).
///
#define ARCHON_STEADY_ASSERT_UNREACHABLE()      \
    X_ARCHON_STEADY_ASSERT_UNREACHABLE()








// Implementation


#if ARCHON_ASSERTIONS_ENABLED
#  define X_ARCHON_ASSERT(condition)            \
    X_ARCHON_STEADY_ASSERT(condition)
#  define X_ARCHON_ASSERT_M(condition, message)         \
    X_ARCHON_STEADY_ASSERT_M(condition, message)
#  define X_ARCHON_ASSERT_UNREACHABLE()         \
    X_ARCHON_STEADY_ASSERT_UNREACHABLE()
#else
#  define X_ARCHON_ASSERT(condition)                                    \
    static_cast<void>(sizeof bool(condition))
#  define X_ARCHON_ASSERT_M(condition, message)                         \
    static_cast<void>(sizeof bool(condition) + sizeof (archon::core::impl::terminate(message,  __FILE__, __LINE__), 0))
#  define X_ARCHON_ASSERT_UNREACHABLE()         \
    static_cast<void>(0)
#endif


#define X_ARCHON_STEADY_ASSERT(condition)                               \
    X_ARCHON_STEADY_ASSERT_M(condition, "Assertion failed: " #condition)


#define X_ARCHON_STEADY_ASSERT_M(condition, message)                    \
    (ARCHON_LIKELY(condition) ? static_cast<void>(0) :                  \
     archon::core::impl::terminate(message, __FILE__, __LINE__))


#define X_ARCHON_STEADY_ASSERT_UNREACHABLE()                            \
    X_ARCHON_STEADY_ASSERT_M(false, "Assertion failed: Unreachable")


#endif // ARCHON_X_CORE_X_ASSERT_HPP
