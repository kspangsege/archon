Current idea of how to structure the code:

fsa.hpp contains a complete implementation of an NFA with various operations that modify the machine in place including minimization an operation that converts it into a DFA. The machine should not be a reference counted object.
matcher.hpp contains an abstract interface for a matcher that produces a sequence of successive tokens.
fsa.hpp also has a method that will create a matcher based on the current configuarion of the state machine.
Maybe a matcher and a lexer is the same thing. In that case matcher.hpp should be lexer.hpp.



"Lexeme" is a sequence of characters from input.
"Token" is the product of a lexer.
A Lexeme is associated with a token.

A token holds a terminal identifier and an attribute value.


A regex lexer will find the longest possible prefix matching a pattern. If more than one pattern matches the longest possible prefix, then the one with highest priority (occuring fist) will be chosen.



Dfa // Abstract DFA

GenericDfa: Dfa // Implementation of DFA using tables to encode the transition function.

Dfa::Matcher // ...


Lexer // Abstract lexer

GenericLexer // Contains a GenericLexer::Engine reference, an input stream and the current DFA state
GenericLexer::Engine // contains a DFA


RegexLexerEngine: GenericLexer::Engine
// Builds GenericNfa from a set of regular expressions
// Builds GenericDfa from the NFA


Usage:

GenericNfa nfa;

GenericDfa dfa(Nfa const &nfa);

GenericLexer::Engine e(Dfa const &a);



Using the GenericLexer:
-----------------------

GenericLexer::Engine engine(Dfa &a, , context);




Using the RegexLexer:
---------------------

RegexLexerEngine engine(regexSet);

GenericLexer lexer(istream &i, GenericLexer::Engine const &engine);

Parser parser(...);

parser.parse(Lexer &lexer);








struct Matcher
{

};




QUEST: Define an automaton with the extensions: multiple start states, sentinels. Then treat reversal, determinization and minimization showing that they work and how they are to be interpreted in the context of the extended definition.



Sentinels rethinking:

Does a regular expression containing zero width assertions still denote a regular language? The difference between two regular languages is itself a regular language.

BOI, EOI - beginning of input, end of input

Maybe all sentinels can be generalized as look around constructs (look-behind,expression,look-ahead) where each element is a regular expression. This would require some sort of rendezvous between multiple automata running concurrently.


Model sentinels as symbols that can never occur naturally in input.
Preprocess input by inserting sentinel symbols between ordinary symbols whenever the associated anchor condition is satisfied. Let T be the set of sentinels whose condition is satisfied between two ordinary input symbols. Let t be the string of all the symbols in T in some arbitrary order. Then insert N repetitions of t betwen the two ordinary symbols where N is the number of states in the automaton.

We must now ask which language must be accepted

When constructing NFA from REGEX treat sentinels as ordinary symbols.
Problem now is that sentinels will never occur in input.

Every state has an implicit transition to itself on every sentinel symbol.





---- NOTATION ----

{ x : P(x) } is the set of all elements x satisfying the predicate P.

A|B is the union of sets A and B, and if A is a set of sets then |A is the union of all the sets in A.

A&B is the intersection of sets A and B, and if A is a set of sets then &A is the intersection of all the sets in A.

A*P is the cartesian product of sets A and B.

e is the empty string (aka. epsilon).

rev(w), where w is a string, is the revese of w.


---- MULTIPLE START STATES ----

Definition: An NFA with multiple start states is a quintuple
(K,A,D,S,T) where

  K is a finite set of states
  A is an alphabet
  D, the transition relation, is a subset of K*(A|{e})*K
  S, a subset of K, is the set of start states
  T, a subset of K, is the set of accepting states

Under this definition two different start states should not in general
be understood as equivalent, and the same is true for a pair of
distinct accepting states. For this reason we can no longer think of
an NFA as accepteing a single language. Instead we should think of it
as accepting a specific language for each unique pair (s,t) where s is
a start state and t an accepting state.

Definition: Let A be an NFA, then a state t is said to be reachable
from state s on input w in A iff the machine configuration (s,w) yields
(t,e) in zero or more steps.

Definition: Let A be an NFA, then for each pair of states (s,t) we
define L(A,s,t) as the set of words on which t is reachable from s in
A.

Proposition: L(A,s,t) is a regular language for any NFA A and any
states s, t in A.

Proof: Let A = (K,A,D,S,T) and choose any s, t from K, then A' =
(K,A,D,{s},{t}) is also an NFA, and since they have the same
transitions any word that can take us from s to t in one machine can
also do it in the other. Since L(A',s,t) is a gerular language by
definition, then so is L(A,s,t). QED.

Of special significance are the languages L(A,s,t) where s is a start
state in A and t is an accepting state. These languages identifiy our
generalized automaton in the same sence as the single recognized
language identifies a conventional NFA.

If for a specific NFA A we choose to regard all start states as
equivalent and all accepting states as equivalent then we can again
speak of the language L recognized by A, and

  L = L(A) = |{ L(A,s,t) : s is in S and t is in T }

When referring to an NFA in the following it is to be understood as an
NFA of this generalized kind.


---- REVERSAL OF NFA ----

Definition: Let A be an NFA. The reversal of A, written rev(A), is
itself an NFA. If A = (K,A,D,S,T) and rev(A) = (K',A',D',S',T') then

  K' = K
  A' = A
  D' = { (s,u,t) : (t,u,s) is in D }
  S' = T
  T' = S

That is, every edge is reversed and the meanings of start state and
accepting state are interchanged.

Reversal is an involution, that is, rev(rev(A)) = A.

Proposition: Let A be an NFA and A' = rev(A), then L(A,s,t) is equal
to the reverse of L(A',t,s) for any states s and t.

Proof: It is enough to proove that whenever w is in L(A,s,t) then the
reverse of w is in L(A',t,s). This is true beacuse reversal is an
involution. To see it, assume that w' is in L(A',t,s), then because
rev(A') = A, the reverse of w' must be in L(A,s,t).

If w is in L(A,s,t) where A = (K,A,D,S,T) then there must be at least
one possible sequence of transitions in A that takes us from s to t on
w. We choose one such sequence which we can write as a sequence of
machine configurations

  (s,w) -> (s',v) -> ... -> (t,e)

where w = av and a is in A|{e}.

This sequence may contain only one element (no transitions) in which
case s = t and w = e, but then w is trivially in L(A',t,s).

We can now safely assmue that the above sequence involes at least on
transition which implies that (s,a,s') is in D and v is in L(A,s',t).

By induction we can assume that if v is in L(A,s',t) then the reverse
of v is in L(A',t,s'). This is true becasue it is possible to choose a
transition sequence for v that is strictly shorter than the one we
chose for w.

The fact that (s,a,s') is in D implies that (s',a,s) is in D' where D
is the transition relation of A'. From the inductive hyposthesis we
have that the reverse of v is in L(A',t,s'). In combination these
results implies that A' has a sequence of configurations on the form

  (t,v'a) -> ... -> (s',a) -> (s,e)

where v' is the reverse of v.

Since v'a is equal to the reverse of w we can compclude that the
reverse of w is in L(A',t,s). QED.


---- DETERMINIZATION ----


---- MINIMIZATION ----

Using Brzozowski's algorithm.
See http://www.dcc.fc.up.pt/dcc/Pubs/TReports/TR07/dcc-2007-03.pdf



---- SENTINELS ----

Some extended definitions of regular expressions allow for various
kinds of zero-width assertions. A zero-width assertion is a
subexpression that matches the empty string but only when the
corresponding input position satisfies a certain condition. Examples
from POSIX.2 are (^) and ($) which match at the beginning and at the
end of a line respectively.

Unfortunately there is no direct way of handling zero-width assertions
in an NFA as defined above. The problem is that we have no way of
labeling an edge with anything but an input symbol.

Although there are many other ways to deal with zero-width assertions,
we shall explore one based on the notion of sentinels.

The idea is to represent each type of zero-width assertion with a
symbol from the alphabet under the assumption that none of these
symbols can occur naturally in the input.

We define a sentinel to be a symbol from the alphabet used to model a
zero-width assertion.

Of course this idea only works if we in some way inject sentinels into
the sequence of input symbols. Our first approach is to inject one
sentinel for a certain zero-with assertion whenever that assertion is
true.

Assume that (^) is the only defined sentinel, and consider the
following automaton which is the "naive" construction from the
regular expression (a|^):

<PRE>
        a
  >(1) ---> ((2))
     \
    ^ \
        --> ((3))

</PRE>

This automaton would not accept '^a' as input which it ought to,
considering the regular expression and the fact that the original
input was 'a'. The following alternative works however:

<PRE>
              a
        --------> ((2))
      /    \
     /     / ^
  >(1) <--
     \
    ^ \
        --> ((3))

</PRE>

This automaton illustrates the idea of 'sentiel regret'. That is,
whenever there is a transition on the sentinel from state s, there
should also be a transition from s to itself on that sentinel. This
way the automaton can always consume a sentinel without loosing
options. In a senece it can follow the sentinel edge and then regret
that choice.


HOW TO DEAL WITH SENTINELS UNDER REVERSAL?


DO WE REALLY NEED TO ADD SELF-SENTINEL EDGES ON EVERY STATE OR IS IT ENOUGH TO ADD THEM WHENEVER THE STATE IS IN A PREFIX SUBSET IN WHICH THERE IS ALSO ANOTHER STATE THAT HAS AN OUTBOUND-EDGE ON THAT SENTINEL?



OBSERVE THAT AT SOME STATES A SENTINEL WILL SIMPLY BE IGNORED - AT SUCH A STATE WE SHOULD NOT GENERATE ANY SENTINELS




This automaton would do the job assuming that (^) was the only defined
sentinel. We could even extend the idea to larger automata by
requiring that every state has a transition to itself on the sentinel. This is required We need that because 




 the idea will not work in practise because the construction 
reasons:

  The structure does not follow that of the regular expression.
  

This automaton will indeed do the job assuming that there are no other
sentinels defined. Had ($) been defined then However we are faced with the following problems:

  


This allows os to model the regular expression '^' as

<PRE>

         ^
  >(1) -----> ((2))

</PRE>

However we immediatly face the problem that the above NFA will fail to
accept e (the empty input) which it ought to onsidering the meaning of
the original regular expression.



IDEA:

Assume that Z is a subset of A denoting a set of sentinels which can never occur naturally in input.

The regret rule:

Whenever we add a transition (s,z,t) in K*Z*K then also add (s,z,s).


What this means for the recognized language is that if you pick two words with common prefix and one has a sentinel after the perfix then the language also contains

 if pzw is in L
then so is

  { pzv | pv is in L }

regret(pzv,pw) = pzw


--- IMPLEMENTATION ----



We assume that the NFA has at most one accepting state per token
ID. If this were not the case for some specific token ID we could
easily add a new accepting state with epsilon transitions to it from
every old accepting state reporting this token ID.



a = new Nfa()
a.states.resize(states.size())
For each state s:
  For each edge range (f,l,t) in s: a.addEdgeRange(t,s,f,l)
  For each sentinel edge (a,t) in s: a.addSentinelEdge(t,s,a)
  For each epsilon edge (t) in s: a.addEpsilonEdge(t,s)


Consider two states s, t:

Let A be the set of all ordinary symbols
Let S be the set of all sentinel symbols

The complete set of edges leading away from s is:

  Ordinary:
    (a,t) for each explicit edge (a,t)
    (a,ø) for each a in A
  Sentinel:
    (a,t) for each explicit sentinel edge (a,t)
    (a,s) for each a in 
  Epsilon:
    (t) for each explicit epsilon edge (t)

