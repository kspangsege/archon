// This file is part of the Archon project, a suite of C++ libraries.
//
// Copyright (C) 2022 Kristian Spangsege <kristian.spangsege@gmail.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this
// software and associated documentation files (the "Software"), to deal in the Software
// without restriction, including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef ARCHON_X_IMAGE_X_ERROR_HPP
#define ARCHON_X_IMAGE_X_ERROR_HPP

/// \file


#include <string>
#include <system_error>

#include <archon/core/features.h>


namespace archon::image {


/// \brief Image errors.
///
/// These errors may be generated by functinos such as \ref image::load().
///
/// \sa \ref image::make_error_code(Error)
///
enum class Error {
    /// Specified file format not available. A file format identifier was specified (\ref
    /// image::LoadConfig::file_format), but there was no file format associated with that
    /// identifier in the file format registry (\ref image::FileFormat::Registry).
    file_format_unavailable = 1,

    /// File format could not be detected. Detection of the image file format failed.
    file_format_detection_failed = 2,

    /// Wrong file format. The leading bytes of the loaded file are not valid for the
    /// selected file format. This error can be generated by \ref image::try_load() if a
    /// particular file format is specified through \ref image::LoadConfig::file_format.
    wrong_file_format = 3,

    /// File could not be loaded. Loading of the image file failed. This error is generated
    /// only if the leading bytes of the file are valid. If they are not, \ref
    /// wrong_file_format is generated instead.
    bad_file = 4,

    /// Image is too large, or too small. The horizontal and/or vertical size of an image
    /// was too big, or too small. This error can be generated during a load operation (\ref
    /// image::try_load()) if the loaded image is too large, or during a save operation
    /// (\ref image::try_save()) if the saved image is too large, or too small. Most image
    /// file formats do not allow images of zero size.
    image_size_out_of_range = 5,

    /// Saving process failed. A failure of unspecified type occurred during the saving of
    /// an image.
    saving_process_failed = 6,
};


/// \brief Make image error code object.
///
/// This function constructs an image error code object. Together with the specialization of
/// `std::is_error_code_enum<T>` for \ref image::Error, this allows for implicit conversion
/// from an enum value to an error code object.
///
auto make_error_code(image::Error) noexcept -> std::error_code;








// Implementation


} // namespace archon::image

namespace std {


template<> class is_error_code_enum<archon::image::Error> {
public:
    static constexpr bool value = true;
};


} // namespace std

namespace archon::image {

namespace impl {


class ErrorCategory
    : public std::error_category {
public:
    auto name() const noexcept -> const char* override final;
    auto message(int) const -> std::string override final;
};


inline constinit const impl::ErrorCategory g_error_category;


} // namespace impl


inline auto make_error_code(image::Error err) noexcept -> std::error_code
{
    return std::error_code(int(err), impl::g_error_category);
}


} // namespace archon::image

#endif // ARCHON_X_IMAGE_X_ERROR_HPP
